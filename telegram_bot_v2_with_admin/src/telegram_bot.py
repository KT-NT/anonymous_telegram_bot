import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
try:
    from models.telegram_user_v2 import db, TelegramUser, AnonymousMessage, AdminSession, AdminAction, VIPMessageSettings
    MODELS_V2_AVAILABLE = True
except ImportError:
    from models.telegram_user import db, TelegramUser, AnonymousMessage
    MODELS_V2_AVAILABLE = False

from main_v2 import create_app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    BOT_TOKEN = "dummy_token"

# URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEB_APP_URL = os.environ.get('WEB_APP_URL', 'http://localhost:5000')

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
flask_app = create_app()

def get_user_or_create(telegram_user: types.User):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ"""
    with flask_app.app_context():
        user = TelegramUser.query.filter_by(telegram_id=telegram_user.id).first()
        
        if not user:
            user = TelegramUser(
                telegram_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name
            )
            db.session.add(user)
            db.session.commit()
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
        
        return user

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = get_user_or_create(message.from_user)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    anonymous_link = user.get_anonymous_link(WEB_APP_URL)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP-—Å—Ç–∞—Ç—É—Å
    vip_status = ""
    if MODELS_V2_AVAILABLE:
        try:
            if user.is_vip:
                vip_status = "\n\n‚≠ê –£ –≤–∞—Å VIP-—Å—Ç–∞—Ç—É—Å! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."
        except AttributeError:
            pass
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!

üë§ –í–∞—à–µ –∏–º—è: {user.get_display_name()}
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
{anonymous_link}

üìù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!

üí° –ö–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/link - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π{vip_status}

üîí –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã.
"""
    
    await message.answer(welcome_text)

@dp.message(Command("link"))
async def cmd_link(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link"""
    user = get_user_or_create(message.from_user)
    anonymous_link = user.get_anonymous_link(WEB_APP_URL)
    
    await message.answer(f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{anonymous_link}")

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user = get_user_or_create(message.from_user)
    
    with flask_app.app_context():
        total_messages = AnonymousMessage.query.filter_by(recipient_id=user.id).count()
        sent_messages = AnonymousMessage.query.filter_by(recipient_id=user.id, is_sent=True).count()
        
        stats_text = f"""
üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üì© –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {sent_messages}
"""
        
        if MODELS_V2_AVAILABLE:
            try:
                anonymous_messages = AnonymousMessage.query.filter_by(
                    recipient_id=user.id, 
                    is_anonymous=True
                ).count()
                non_anonymous_messages = AnonymousMessage.query.filter_by(
                    recipient_id=user.id, 
                    is_anonymous=False
                ).count()
                
                stats_text += f"üï∂Ô∏è –ê–Ω–æ–Ω–∏–º–Ω—ã—Ö: {anonymous_messages}\n"
                stats_text += f"üë§ –ù–µ–∞–Ω–æ–Ω–∏–º–Ω—ã—Ö: {non_anonymous_messages}\n"
                
                if user.is_vip:
                    stats_text += f"\n‚≠ê VIP-—Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
                    if user.vip_granted_at:
                        stats_text += f"\nüìÖ VIP —Å: {user.vip_granted_at.strftime('%d.%m.%Y')}"
                
            except AttributeError:
                pass
        
        await message.answer(stats_text)

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è V2)
if MODELS_V2_AVAILABLE:
    @dp.message(Command("admin"))
    async def cmd_admin(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user = get_user_or_create(message.from_user)
        
        with flask_app.app_context():
            if not user.is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                admin_session = AdminSession(admin_id=user.id)
                db.session.add(admin_session)
                db.session.commit()
                
                admin_link = f"{WEB_APP_URL}/admin/dashboard"
                
                await message.answer(f"""
üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!

üîó –°—Å—ã–ª–∫–∞: {admin_link}
üîë –¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏: `{admin_session.session_token}`

‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞. –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

üí° –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin - –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
/grant_vip [user_id] - –í—ã–¥–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å
/revoke_vip [user_id] - –û—Ç–æ–∑–≤–∞—Ç—å VIP-—Å—Ç–∞—Ç—É—Å
/user_info [user_id] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
""", parse_mode="Markdown")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω-—Å–µ—Å—Å–∏–∏: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    @dp.message(Command("grant_vip"))
    async def cmd_grant_vip(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /grant_vip"""
        admin_user = get_user_or_create(message.from_user)
        
        with flask_app.app_context():
            if not admin_user.is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            try:
                parts = message.text.split()
                if len(parts) < 2:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /grant_vip [user_id]")
                    return
                
                target_user_id = int(parts[1])
                target_user = TelegramUser.query.filter_by(telegram_id=target_user_id).first()
                
                if not target_user:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                if target_user.is_vip:
                    await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get_display_name()} —É–∂–µ –∏–º–µ–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å.")
                    return
                
                # –í—ã–¥–∞–µ–º VIP-—Å—Ç–∞—Ç—É—Å
                target_user.grant_vip(admin_user)
                db.session.commit()
                
                await message.answer(f"‚úÖ VIP-—Å—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.get_display_name()}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await bot.send_message(
                        target_user.telegram_id,
                        "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–¥–∞–Ω VIP-—Å—Ç–∞—Ç—É—Å!\n\n"
                        "‚≠ê –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.telegram_id}: {e}")
                
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ VIP: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ VIP-—Å—Ç–∞—Ç—É—Å–∞.")

    @dp.message(Command("revoke_vip"))
    async def cmd_revoke_vip(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /revoke_vip"""
        admin_user = get_user_or_create(message.from_user)
        
        with flask_app.app_context():
            if not admin_user.is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            try:
                parts = message.text.split()
                if len(parts) < 2:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revoke_vip [user_id]")
                    return
                
                target_user_id = int(parts[1])
                target_user = TelegramUser.query.filter_by(telegram_id=target_user_id).first()
                
                if not target_user:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                if not target_user.is_vip:
                    await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.get_display_name()} –Ω–µ –∏–º–µ–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å–∞.")
                    return
                
                # –û—Ç–∑—ã–≤–∞–µ–º VIP-—Å—Ç–∞—Ç—É—Å
                target_user.revoke_vip(admin_user)
                db.session.commit()
                
                await message.answer(f"‚úÖ VIP-—Å—Ç–∞—Ç—É—Å –æ—Ç–æ–∑–≤–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.get_display_name()}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await bot.send_message(
                        target_user.telegram_id,
                        "üì¢ –í–∞—à VIP-—Å—Ç–∞—Ç—É—Å –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω.\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.telegram_id}: {e}")
                
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ VIP: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ VIP-—Å—Ç–∞—Ç—É—Å–∞.")

    @dp.message(Command("user_info"))
    async def cmd_user_info(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user_info"""
        admin_user = get_user_or_create(message.from_user)
        
        with flask_app.app_context():
            if not admin_user.is_admin:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            try:
                parts = message.text.split()
                if len(parts) < 2:
                    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info [user_id]")
                    return
                
                target_user_id = int(parts[1])
                target_user = TelegramUser.query.filter_by(telegram_id=target_user_id).first()
                
                if not target_user:
                    await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                total_messages = AnonymousMessage.query.filter_by(recipient_id=target_user.id).count()
                
                info_text = f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:

üÜî Telegram ID: {target_user.telegram_id}
üìù –ò–º—è: {target_user.get_display_name()}
üë§ Username: @{target_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {target_user.created_at.strftime('%d.%m.%Y %H:%M') if target_user.created_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üì© –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: {total_messages}

‚≠ê VIP-—Å—Ç–∞—Ç—É—Å: {'–î–∞' if target_user.is_vip else '–ù–µ—Ç'}
"""
                
                if target_user.is_vip and target_user.vip_granted_at:
                    info_text += f"üìÖ VIP —Å: {target_user.vip_granted_at.strftime('%d.%m.%Y %H:%M')}\n"
                
                if target_user.is_admin:
                    info_text += "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –î–∞\n"
                
                info_text += f"\nüîó –°—Å—ã–ª–∫–∞: {target_user.get_anonymous_link(WEB_APP_URL)}"
                
                await message.answer(info_text)
                
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n"
        "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/link - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

async def send_message_to_user(user_id: int, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    try:
        await bot.send_message(user_id, message_text, parse_mode="HTML")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

async def process_pending_messages():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    with flask_app.app_context():
        pending_messages = AnonymousMessage.query.filter_by(is_sent=False).all()
        
        for msg in pending_messages:
            try:
                formatted_message = msg.get_formatted_message() if MODELS_V2_AVAILABLE else f"üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{msg.message_text}"
                
                success = await send_message_to_user(
                    msg.recipient.telegram_id,
                    formatted_message
                )
                
                if success:
                    msg.is_sent = True
                    db.session.commit()
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {msg.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.recipient.telegram_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {e}")

async def periodic_message_processing():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    while True:
        try:
            await process_pending_messages()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    if BOT_TOKEN == "dummy_token":
        logger.warning("–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(periodic_message_processing())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

